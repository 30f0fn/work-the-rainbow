import random
import constraint
from constraint import *
import itertools

from models import ShiftPreference

"""
SIMPLE VERSION: just try to map shifts to families
"""

families = {f:fam for f, fam in enumerate(Classroom.children())}

accepts = {family: ShiftPreference.objects.filter(family=family, rank=1)
                         for family in families }

problem = Problem()

for fam in families:
    problem.addVariable(fam, accepts[fam])

for c1,c2,c3 in itertools.combinations(families, 3):
    problem.addConstraint(lambda s1, s2, s3:
                          not(s1 == s2 == s3),
                          [c1, c2, c3])

# def display_slot(s):
    # d1 = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
    # d2 = ["8:30-10:30", "1:30-3:30", "3:30-5:30"]
    # return "{}, {}".format(d1[s[0]], d2[s[1]])

def display_assignment(asgn):
    for l in asgn:
        pretty = "{}: {}".format(l, display_shift(asgn[l]))
        print(pretty)

for asgn in problem.getSolutions():
    print("\n-------")
    display_assignment(asgn)



