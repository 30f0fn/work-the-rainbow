import datetime

from django.shortcuts import render
from django.views.generic import TemplateView, ListView

from people.models import Classroom
from people.views import ClassroomMixin
from main.utilities import weeks_for_month
from main.models import FamilyCommitment

"""
calendar views

time divisions:
#  units-relative-from-today vs by-absolute-unit
#  try the former
#  do these three views:
#    daily/weekly/monthly

ownership:
# classroom/user
# there should be family-oriented, and classroom-oriented
# user-owned calendar doesn't need 

"""




class HomeView(TemplateView):
    template_name = 'home.html'

    
class CalendarView(ListView):
    duration = 0
    
    @property
    def year(self):
        return self.kwargs.get('year')

    @property
    def month(self):
        return self.kwargs.get('month', 1)

    @property
    def day(self):
        return self.kwargs.get('day', 1)

    @property
    def start_date(self):
        return datetime.date(self.year, self.month, self.day)

    def days(self):
        return [self.start_date + n * datetime.timedelta(days=n)
                for n in range(duration)]

    def weeks(self):
        return [week_of(self.start_date + datetime.timedelta(days = n * 7))
                for n in self.duration // 7]
    

class HolidayMixin(object):
    @property
    def holidays(self):
        return Holiday.objects.filter(
            classroom=classroom,
            date__gte=self.start_date,
            date__lte=self.start_date+duration)


class WorktimeMixin(object):
    @property
    def worktime_commitments_by_day(self):
        commitments = FamilyCommitment.objects.filter(
            date__gte=self.start_date,
            date__lte=self.start_date+duration)
        dc_dict = {date: [dc for dc in daily_commitments if dc.date==date]
                   for date in [self.start_date + datetime.timedelta(days=i)
                                for i in range(self.duration)]}
        return dc_dict


class ClassroomWorktimeMixin(WorktimeMixin, ClassroomMixin):
    @property
    def worktime_commitments(self):
        return super().worktime_commitments().filter(classroom=self.classroom)


class FamilyWorktimeMixin(WorktimeMixin):
    @property
    def worktime_commitments(self):
        return super().worktime_commitments().filter(family=self.family)


class DailyCalendarView(CalendarView):
    duration = datetime.timedelta(days=1)


class WeeklyCalendarView(CalendarView):
    duration = datetime.timedelta(days=7)
    

class MonthlyCalendarView(CalendarView):
    duration = datetime.timedelta(days=7)

    # this differs from default, because the weekdays not in month are replaced with None
    @property
    def weeks(self):
        return weeks_for_month(self.year, self.month)



#########################
# family calendar views #
#########################

class DailyFamilyCalendarView(FamilyWorktimeMixin, HolidayMixin, DailyCalendarView):
    pass


class WeeklyFamilyCalendarView(FamilyWorktimeMixin, HolidayMixin, WeeklyCalendarView):
    pass


class MonthlyFamilyCalendarView(FamilyWorktimeMixin, HolidayMixin, MonthlyCalendarView):
    pass


############################
# classroom calendar views #
############################

class DailyClassroomCalendarView(ClassroomWorktimeMixin, HolidayMixin, DailyCalendarView):
    pass


class WeeklyClassroomCalendarView(ClassroomWorktimeMixin, HolidayMixin, WeeklyCalendarView):
    pass


class MonthlyClassroomCalendarView(ClassroomWorktimeMixin, HolidayMixin, MonthlyCalendarView):
    pass
